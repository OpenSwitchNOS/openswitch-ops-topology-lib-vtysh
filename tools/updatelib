#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2016 Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""
Vtysh code generation module.
"""

from __future__ import unicode_literals, absolute_import
from __future__ import print_function, division

import logging
from re import sub
from os.path import abspath, normpath, dirname, join

from inflection import parameterize, underscore, camelize
from jinja2 import FileSystemLoader, Environment, StrictUndefined

from vtysh_meta import VTYSH_SPEC, VTYSH_EXCEPTIONS_SPEC


log = logging.getLogger(__name__)


def filter_objectize(token):
    if token is None:
        return None
    return camelize(underscore(parameterize(underscore(token))))


def filter_methodize(token):
    if token is None:
        return None
    return underscore(parameterize(underscore(sub('{\S+}', '', token))))


def filter_variablize(token):
    if token is None:
        return None
    return underscore(parameterize(underscore(token)))


def build():
    """
    Build all vtysh modules from the specification file.
    """

    # Find paths
    root = dirname(normpath(abspath(__file__)))
    lib_dir = join(dirname(root), 'lib/topology_lib_vtysh')

    # Create jinja2 environment
    env = Environment(
        loader=FileSystemLoader(root),
        undefined=StrictUndefined
    )
    for ftr in ['objectize', 'methodize', 'variablize']:
        env.filters[ftr] = globals()['filter_' + ftr]

    # Define templates and payloads to render
    to_render = [
        ('library.py', VTYSH_SPEC),
        ('exceptions.py', VTYSH_EXCEPTIONS_SPEC)
    ]

    for filename, spec in to_render:

        # Get template and render
        template = env.get_template(
            '{}.tpl'.format(filename)
        )
        rendered = template.render(spec=spec)

        # Write output
        with open(join(lib_dir, filename), 'w') as fd:
            fd.write(rendered)


if __name__ == '__main__':
    build()
