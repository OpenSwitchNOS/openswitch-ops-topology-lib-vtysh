.. toctree::

.. highlight:: sh

===============
Developer Guide
===============


Setup Development Environment
=============================

#. Install ``pip`` and ``tox``:

   ::

      sudo apt-get install python-pip
      sudo pip install tox

#. Configure git pre-commit hook:

   ::

      sudo pip install flake8 pep8-naming
      flake8 --install-hook
      git config flake8.strict true


Building Documentation
======================

::

   tox -e doc

Output will be available at ``.tox/doc/tmp/html``. It is recommended to install
the ``webdev`` package:

::

   sudo pip install webdev

So a development web server can serve any location like this:

::

   $ webdev .tox/doc/tmp/html


Running Test Suite
==================

::

   tox -e py27,py34


Adding functions
================

Vtysh library is autogenerated from a description dictionary via **tools/spec**
python script. This dictionary is composed by *contexts*, each one containing
several *commands*.

The dictionary can be found on *tools/spec* and has the following structure:

::

      'context': {
        'doc': 'Context documentation.',
        'arguments': [
            {
                'name': 'arg1',
                'doc': 'Context argument 1.'
            }
        ],
        'pre_commands': ['pre command 1', 'pre command 2 {arg1}'],
        'post_commands': ['post command'],
        'commands': [
            {
                'command': 'vtysh command {arg_a}',
                'doc': 'Documentation for the command',
                'arguments': [
                    {
                        'name': 'arg_a',
                        'doc': 'Argument for command.'
                    },
                ],
            },
            ...
         ]
      }

A *context* is a vtysh context, to get inside one a list of *pre_commands* is
run on a vtysh cli, when you are done with the context a list of
*post_commands* is executed to clean the cli.

Inside the context any number of commands can be defined. The python function
generated will be called as the vtysh command, but with underscores. This way
the first command on the example will create a function called *vtysh_command*
with *arg_a* as argument.

To add a new command to the library, a developer needs to:

1. Find if the context for the command is already defined on the dictionary.
2. If it is not defined, it has to be added.
3. Define the new command inside *commands* on the correct context
4. Execute the generator script. To do this:

   1. Go to the ``topology_lib_vtysh`` root folder.
   2. Run ``tox`` which validates your script and prepares the py34 environment
   3. Run ``source .tox/py34/bin/activate``.
   4. Run ``./tools/spec``.
   5. Run ``deactivate``.

If the vtysh command has output (by example any *show* command), a parser
function has to be defined in **parser.py**. The name of this function must be
"parse_<name_of_the_function>".Be aware that a function that does not belongs
to root, must have the shape "parse_<context_name>_<function_name>".
For example, if a command is "show house" a python function called "show_house"
will be autogenerated and the developer must manually define a function named
"parse_show_house" on parser.py with a description on how to parse the result
of the vtysh command. If  the command "show house" runs under the context
"Condo", the function name that must be added in parser.py must be named
"parse_condo_show_house"

Usage is described on :class:`topology_lib_vtysh.library.ContextManager`

Collisions between commands
...........................

It may happen that there are 2 or more vtysh commands that share the same
instructions (the actual words that make the vtysh command) but have different
types of parameters.

For example, this could be one of those cases:

- ``vtysh command ip`` where ``vtysh command`` are instructions and ``ip``
  is an argument.
- ``vtysh command group`` where ``vtysh command`` are instructions and
  ``group`` is an argument.

In that case, there must exist only one library function where its
documentation clearly explains the multiple types of parameters that it may
receive. You can find an example in the documentation for
:func:`topology_lib_vtysh.library.Configure.ip_route`.


About show-running function
...........................
The code currently is parsing only the BGP section. If an additional
section requires parsing, a new index should be added to the result
dictionary, i.e.: if vlan section parsing is to be implemented then:
1- A regex to capture only the required (vlan) section must be defined
2- An entry to the result dictionary with vlan index should be added:
result['vlan'] = {}
3- Any vlan related data that is parsed should be added to the vlan section
i.e.: result['vlan']['vlanList'] = code_that_gets_vlan_list
4- Follow the same order that the show-running output is displayed to keep
consistency and readability.
